/**
 * @jest-environment jsdom
 */
import React from "react";
import { mount } from "enzyme";
import { TextFieldInput, SelectInput, TagsInput } from "../FormInput";
import { categoryOptions,tagOptions } from "../../data";
import { useForm, FormProvider } from "react-hook-form";
import { IGeneralFormInputs } from "../../pages/postList/PostForms/IFormInputs";

const formDefaultValues: IGeneralFormInputs = {
    category: "general",
    title: "",
    content: "",
    tags: [],
};
const WrapperForm: React.FC = ({ children }) => {
    const methods = useForm<IGeneralFormInputs>({
        defaultValues: formDefaultValues,
    });
    return <FormProvider {...methods}>{children}</FormProvider>;
};

// test component rendering
describe("should be able to render <TextFieldInput />", () => {
    const wrapper = mount(
        <WrapperForm>
            <TextFieldInput name="test" helperText="help text" />
        </WrapperForm>
    );

    it("should have <TextFieldInput>", () => {
        expect(wrapper.find("TextFieldInput").exists()).toBe(true);
    });

    it("should have a label with id #test-input-label, and the text equal to test", () => {
        // the label id is generated by MUI when pass a name in TextField
        expect(wrapper.find("label#test-input-label").text()).toEqual("test");
    });

    it("should have an input with id test-input", () => {
        // the input id is generated by MUI when pass a name in TextField
        expect(wrapper.find("input#test-input").exists()).toBe(true);
    });

    it("should have a p with id test-input-helper-text and the text equal to help text", () => {
        // the helper text id is generated by MUI when pass a name in TextField
        expect(wrapper.find("p#test-input-helper-text").text()).toEqual("help text");
    });
});

describe("should be able to render <SelectInput />", () => {
    const wrapper = mount(
        <WrapperForm>
            <SelectInput
                name="category"
                helperText="help text"
                options={categoryOptions}
            />
        </WrapperForm>
    );
    // TODO - this cannot be tested as the input has an onChange={handleChange}
    // it("should be able to select a value ", () => {
    //     console.log(wrapper.debug());      
    //     const inputElement = wrapper.find("input")
    //     inputElement.simulate("change", {target: {value: "learn"}})
    //     expect(inputElement.prop("value")).toEqual("learn")
    // });

    it("should have <SelectInput>", () => {
        expect(wrapper.find("SelectInput").exists()).toBe(true);
    });

    it("Select element should have options prop equal to categoryOptions", () => {
        expect(wrapper.find("SelectInput").prop("options")).toEqual(categoryOptions);
    });

    it("should have a label with id #category-select-label, and the text equal to category", () => {
        // the label id is generated by MUI when pass a name in Select
        expect(
            wrapper.find("ForwardRef(InputLabel)#category-select-label").text()
        ).toEqual("category");
    });

    it("should have a input with id category-input", () => {
        // the Select element id is generated by MUI when pass a name in Select
        expect(wrapper.find("ForwardRef(Select)#category-input").exists()).toBe(true);
    });

    it("should have helperText element and the text equal to help text", () => {
        // the helperText id is generated by MUI when pass a name in Select
        expect(wrapper.find("ForwardRef(FormHelperText)").text()).toEqual("help text");
    });
});

describe("should be able to render <TagsInput />", () => {
    const wrapper = mount(
        <WrapperForm>
            <TagsInput
                name="tags"
                helperText="help text"
                tags={tagOptions}
            />
        </WrapperForm>
    );

    it("should have <TagsInput>", () => {
        console.log(wrapper.debug());       
        expect(wrapper.find("TagsInput").exists()).toBe(true);
    });

    it("TagsInput element should have tags prop equal to tagsOptions", () => {
        expect(wrapper.find("TagsInput").prop("tags")).toEqual(tagOptions);
    });

    it("should have a label with id #tags-select-label, and the text equal to tags", () => {
        expect(
            wrapper.find("ForwardRef(InputLabel)#tags-select-label").text()
        ).toEqual("tags");
    });

    it("should have a input with id tags-input", () => {
        expect(wrapper.find("ForwardRef(Select)#tags-input").exists()).toBe(true);
    });

    it("should have helperText element and the text equal to help text", () => {
        expect(wrapper.find("ForwardRef(FormHelperText)").text()).toEqual(
            "help text"
        );
    });
});
